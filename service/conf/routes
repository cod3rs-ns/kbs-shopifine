###
#  summary: Retrieve all products in the store
#  parameters:
#    - name: filter[name]
#      description: Value for filtering products by name.
#      in: query
#      type: string
#      required: false
#    - name: filter[category]
#      description: Value that represents category id for filtering products by category.
#      in: query
#      type: integer
#      required: false
#    - name: filter[price-range-from]
#      description: Minimum bound of price for products range filtering.
#      in: query
#      type: number
#      required: false
#    - name: filter[price-range-to]
#      description: Maximum bound of price for products range filtering.
#      in: query
#      type: number
#      required: false
#    - name: filter[active]
#      description: Value for filtering products whether they active or not.
#      in: query
#      type: boolean
#      required: false
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Products
#  responses:
#    200:
#      description: Products retrieved.
#      schema:
#        $ref: '#/definitions/ProductCollectionResponse'
#    400:
#      description: Malformed query parameter specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/products           controllers.Products.retrieveAll(`page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Retrieve all products needs to be filled in stock
#  parameters:
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Products
#  responses:
#    200:
#      description: Products retrieved.
#      schema:
#        $ref: '#/definitions/ProductCollectionResponse'
#    400:
#      description: Malformed query parameter specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/products/out-of-stock      controllers.Products.retrieveAllOutOfStock(`page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Retrieves a product
#  parameters:
#    - name: id
#      description: Unique identifier of Product to retrieve
#      in: path
#      type: integer
#      format: int64
#      required: true
#      example: 1
#  tags:
#    - Products
#  responses:
#    200:
#      description: Product retrieved.
#      schema:
#        $ref: '#/definitions/ProductResponse'
#    404:
#      description: A project with provided id doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/products/:id       controllers.Products.retrieveOne(id: Long)

###
#  summary: Modifies product quantity in the stock
#  parameters:
#    - name: id
#      description: Unique identifier of Product to retrieve
#      in: path
#      type: integer
#      format: int64
#      required: true
#      example: 1
#    - name: quantity
#      description: New quantity to set in the stock
#      in: path
#      type: integer
#      required: true
#      example: 21
#  tags:
#    - Products
#  responses:
#    200:
#      description: Product successfully modified.
#      schema:
#        $ref: '#/definitions/ProductResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: A project with provided id doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
PUT     /api/products/:id       controllers.Products.fillStock(id: Long, quantity: Int)

###
#  summary: Create new product
#  parameters:
#    - name: productSpec
#      description: JSON document containing a Product specification
#      in: body
#      schema:
#        $ref: '#/definitions/ProductRequest'
#  tags:
#    - Products
#  responses:
#    201:
#      description: Product successfully created.
#      schema:
#        $ref: '#/definitions/ProductResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
POST    /api/products           controllers.Products.add()

###
#  summary: Register new user
#  parameters:
#    - name: userSpec
#      description: JSON document containing a User specification
#      in: body
#      schema:
#        $ref: '#/definitions/UserRequest'
#  tags:
#    - Users
#  responses:
#    201:
#      description: User successfully created.
#      schema:
#        $ref: '#/definitions/UserResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    409:
#      description: Username already exists.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
POST    /api/users              controllers.Users.registerUser()

###
#  summary: Authenticate user
#  parameters:
#    - name: userAuthSpec
#      description: JSON document containing a UserAuth specification
#      in: body
#      schema:
#        $ref: '#/definitions/UserAuthRequest'
#  tags:
#    - Users
#  responses:
#    200:
#      description: Successfully retrieved JSON Web Token.
#      schema:
#        $ref: '#/definitions/UserAuthResponse'
#    400:
#      description: Invalid token.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    401:
#      description: Wrong credentials.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    403:
#      description: No privileges.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
POST    /api/users/auth         controllers.Users.auth()

###
#  summary: Retrieves an user
#  parameters:
#    - name: id
#      description: Unique identifier of User to retrieve
#      in: path
#      type: integer
#      format: int64
#      required: true
#      example: 1
#  tags:
#    - Users
#  responses:
#    200:
#      description: User retrieved.
#      schema:
#        $ref: '#/definitions/UserResponse'
#    404:
#      description: A user with provided id doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/users/:id          controllers.Users.retrieveOne(id: Long)

###
#  summary: Create new buyer category
#  parameters:
#    - name: buyerCategorySpec
#      description: JSON document containing a Buyer Category specification
#      in: body
#      schema:
#        $ref: '#/definitions/BuyerCategoryRequest'
#  tags:
#    - Buyer Categories
#  responses:
#    201:
#      description: Buyer Category successfully created.
#      schema:
#        $ref: '#/definitions/BuyerCategoryResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
POST    /api/buyer-categories                           controllers.BuyerCategories.create()

###
#  summary: Retrieves buyer category
#  parameters:
#    - name: id
#      description: Buyer category id
#      in: path
#      type: integer
#      format: int64
#      required: true
#  tags:
#    - Buyer Categories
#  responses:
#    200:
#      description: Buyer category successfully retrieved.
#      schema:
#        $ref: '#/definitions/BuyerCategoryResponse'
#    404:
#      description: Buyer category doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/buyer-categories/:id                       controllers.BuyerCategories.retrieveOne(id: Long)

###
#  summary: Modifies buyer category
#  parameters:
#    - name: id
#      description: Buyer category id
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: buyerCategorySpec
#      description: JSON document containing a Buyer Category specification
#      in: body
#      schema:
#        $ref: '#/definitions/BuyerCategoryRequest'
#  tags:
#    - Buyer Categories
#  responses:
#    200:
#      description: Buyer category successfully modified.
#      schema:
#        $ref: '#/definitions/BuyerCategoryResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Action discount doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
PUT     /api/buyer-categories/:id                       controllers.BuyerCategories.update(id: Long)

###
#  summary: Retrieve all buyer categories
#  parameters:
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Buyer Categories
#  responses:
#    200:
#      description: Buyer categories categories retrieved.
#      schema:
#        $ref: '#/definitions/BuyerCategoryCollectionResponse'
#    400:
#      description: Malformed query parameter specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/buyer-categories                           controllers.BuyerCategories.retrieveAll(`page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Retrieve all buyer categories thresholds
#  parameters:
#    - name: id
#      description: Identifier of buyer category.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Buyer Categories
#  responses:
#    200:
#      description: Thresholds of Buyer Category retrieved.
#      schema:
#        $ref: '#/definitions/ThresholdCollectionResponse'
#    400:
#      description: Malformed query parameter specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Buyer Category doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/buyer-categories/:id/thresholds            controllers.BuyerCategories.retrieveThresholds(id: Long, `page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Create new threshold for buyer category
#  parameters:
#    - name: id
#      description: Identifier of buyer category.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: thresholdSpec
#      description: JSON document containing a Threshold specification
#      in: body
#      schema:
#        $ref: '#/definitions/ThresholdRequest'
#  tags:
#    - Buyer Categories
#  responses:
#    201:
#      description: Threshold successfully created.
#      schema:
#        $ref: '#/definitions/ThresholdResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Buyer Category doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    409:
#      description: Overlap between thresholds.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
POST    /api/buyer-categories/:id/thresholds            controllers.BuyerCategories.addThreshold(id: Long)

###
#  summary: Remove threshold for specified buyer category
#  parameters:
#    - name: categoryId
#      description: Identifier of buyer category.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: thresholdId
#      description: Identifier of threshold.
#      in: path
#      type: integer
#      format: int64
#      required: true
#  tags:
#    - Buyer Categories
#  responses:
#    204:
#      description: Successfully removed threshold.
#    404:
#      description: Buyer Category doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
DELETE  /api/buyer-categories/:categoryId/thresholds/:thresholdId      controllers.BuyerCategories.removeThreshold(categoryId: Long, thresholdId: Long)

###
#  summary: Create new bill
#  parameters:
#    - name: billSpec
#      description: JSON document containing a Bill specification
#      in: body
#      schema:
#        $ref: '#/definitions/BillRequest'
#  tags:
#    - Bills
#    - Users
#  responses:
#    202:
#      description: Bill successfully created. Bill ready for adding bill items.
#      schema:
#        $ref: '#/definitions/BillResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    403:
#      description: No privileges.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
POST    /api/users/:userId/bills                        controllers.Bills.create(userId: Long)

###
#  summary: Retrieve all bills for specific user
#  parameters:
#    - name: userId
#      description: Identifier of user.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Bills
#    - Users
#  responses:
#    200:
#      description: Bills for user retrieved.
#      schema:
#        $ref: '#/definitions/BillCollectionResponse'
#    403:
#      description: No privileges.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/users/:userId/bills                        controllers.Bills.retrieveAllByUser(userId: Long, `page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Retrieve bill for specific user
#  parameters:
#    - name: userId
#      description: Identifier of user.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: billId
#      description: Identifier of bill.
#      in: path
#      type: integer
#      format: int64
#      required: true
#  tags:
#    - Bills
#    - Users
#  responses:
#    200:
#      description: Bill retrieved.
#      schema:
#        $ref: '#/definitions/BillResponse'
#    403:
#      description: No privileges.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Bill doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/users/:userId/bills/:billId                controllers.Bills.retrieveOneByUser(userId: Long, billId: Long)

###
#  summary: Retrieve bill discounts for user's bill
#  parameters:
#    - name: userId
#      description: Identifier of user.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: billId
#      description: Identifier of bill.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Bills
#  responses:
#    200:
#      description: Bill discounts retrieved.
#      schema:
#        $ref: '#/definitions/BillDiscountCollectionResponse'
#    403:
#      description: No privileges.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Bill doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/users/:userId/bills/:billId/discounts      controllers.Discounts.retrieveBillDiscounts(userId: Long, billId: Long, `page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Retrieve all bills
#  parameters:
#    - name: filter[status]
#      description: Value for filtering bills by status.
#      in: query
#      type: string
#      required: false
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Bills
#  responses:
#    200:
#      description: Bills retrieved.
#      schema:
#        $ref: '#/definitions/BillCollectionResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/bills                                      controllers.Bills.retrieveAll(`page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Modify bill state
#  parameters:
#    - name: id
#      description: Identifier of bill.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: state
#      description: New state of bill.
#      in: path
#      type: string
#      enum:
#        - ORDERED
#        - CANCELLED
#        - SUCCESSFUL
#      required: true
#  tags:
#    - Bills
#  responses:
#    200:
#      description: Bill retrieved.
#      schema:
#        $ref: '#/definitions/BillResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    400:
#      description: Insufficiently Products for Bill Accepting.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    400:
#      description: Customer doesn't have enough points.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Bill doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
PUT     /api/bills/:id                                  controllers.Bills.changeState(id: Long, state: String)

###
#  summary: Create new bill item
#  parameters:
#    - name: userId
#      description: Identifier of user.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: billId
#      description: Identifier of bill.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: billItemSpec
#      description: JSON document containing a Bill Item specification
#      in: body
#      schema:
#        $ref: '#/definitions/BillItemRequest'
#  tags:
#    - Bills
#    - Users
#    - Bill Items
#  responses:
#    201:
#      description: Bill item successfully created. Bill ready for adding bill items.
#      schema:
#        $ref: '#/definitions/BillItemResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    403:
#      description: No privileges.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Bill doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
POST    /api/users/:userId/bills/:billId/bill-items     controllers.Bills.addBillItem(userId: Long, billId: Long)

###
#  summary: Retrieve all bill items
#  parameters:
#    - name: userId
#      description: Identifier of user.
#      in: path
#      type: long
#      format: int64
#      required: true
#    - name: billId
#      description: Identifier of bill.
#      in: path
#      type: long
#      format: int64
#      required: true
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Bills
#    - Users
#    - Bill Items
#  responses:
#    200:
#      description: Bill items successfully retrieved.
#      schema:
#        $ref: '#/definitions/BillItemCollectionResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    403:
#      description: No privileges.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Bill doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/users/:userId/bills/:billId/bill-items     controllers.Bills.retrieveBillItems(userId: Long, billId: Long, `page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Retrieve all bill item discounts
#  parameters:
#    - name: userId
#      description: Identifier of user.
#      in: path
#      type: long
#      format: int64
#      required: true
#    - name: billId
#      description: Identifier of bill.
#      in: path
#      type: long
#      format: int64
#      required: true
#    - name: billItemId
#      description: Identifier of bill item.
#      in: path
#      type: long
#      format: int64
#      required: true
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Bill Items
#  responses:
#    200:
#      description: Bill item discounts successfully retrieved.
#      schema:
#        $ref: '#/definitions/BillItemDiscountCollectionResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    403:
#      description: No privileges.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Bill doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Bill item doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/users/:userId/bills/:billId/bill-items/:billItemId/discounts     controllers.Discounts.retrieveBillItemDiscounts(userId: Long, billId: Long, billItemId: Long,  `page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Create new product category
#  parameters:
#    - name: productCategorySpec
#      description: JSON document containing Product Category specification
#      in: body
#      schema:
#        $ref: '#/definitions/ProductCategoryRequest'
#  tags:
#    - Product Categories
#  responses:
#    201:
#      description: Product category successfully created.
#      schema:
#        $ref: '#/definitions/ProductCategoryResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
POST    /api/product-categories             controllers.ProductCategories.create()

###
#  summary: Retrieve all product categories
#  parameters:
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Product Categories
#  responses:
#    200:
#      description: Product categories successfully retrieved.
#      schema:
#        $ref: '#/definitions/ProductCategoryCollectionResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/product-categories             controllers.ProductCategories.retrieveAll(`page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Retrieve all subcategories of specified product category
#  parameters:
#    - name: id
#      description: Identifier of root product category.
#      in: path
#      type: long
#      format: int64
#      required: true
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Product Categories
#  responses:
#    200:
#      description: Product subcategories successfully retrieved.
#      schema:
#        $ref: '#/definitions/ProductCategoryCollectionResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Product category doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/product-categories/:id/subcategories           controllers.ProductCategories.retrieveAllSubcategories(id: Long, `page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Modifies product category
#  parameters:
#    - name: id
#      description: Identifier of product category.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: productCategorySpec
#      description: JSON document containing Product Category specification
#      in: body
#      schema:
#        $ref: '#/definitions/ProductCategoryRequest'
#  tags:
#    - Product Categories
#  responses:
#    201:
#      description: Product category successfully modified.
#      schema:
#        $ref: '#/definitions/ProductCategoryResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Product category doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
PUT     /api/product-categories/:id         controllers.ProductCategories.update(id: Long)

###
#  summary: Retrieves a product category
#  parameters:
#    - name: id
#      description: Identifier of product category.
#      in: path
#      type: integer
#      format: int64
#      required: true
#  tags:
#    - Product Categories
#  responses:
#    200:
#      description: Product category successfully created.
#      schema:
#        $ref: '#/definitions/ProductCategoryResponse'
#    404:
#      description: Product category doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/product-categories/:id         controllers.ProductCategories.retrieveOne(id: Long)

###
#  summary: Create new action discount
#  parameters:
#    - name: actionDiscountsSpec
#      description: JSON document containing Action Discount specification
#      in: body
#      schema:
#        $ref: '#/definitions/ActionDiscountRequest'
#  tags:
#    - Action Discounts
#  responses:
#    201:
#      description: Action discount successfully created.
#      schema:
#        $ref: '#/definitions/ActionDiscountResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
POST    /api/action-discounts               controllers.ActionDiscounts.create()

###
#  summary: Modifies action discount
#  parameters:
#    - name: id
#      description: Identifier of action discount.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: actionDiscountsSpec
#      description: JSON document containing Action Discount specification
#      in: body
#      schema:
#        $ref: '#/definitions/ActionDiscountRequest'
#  tags:
#    - Action Discounts
#  responses:
#    200:
#      description: Action discount successfully modified.
#      schema:
#        $ref: '#/definitions/ActionDiscountResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Action discount doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
PUT     /api/action-discounts/:id           controllers.ActionDiscounts.update(id: Long)

###
#  summary: Retrieve all action discounts
#  parameters:
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Action Discounts
#  responses:
#    200:
#      description: Action discounts successfully retrieved.
#      schema:
#        $ref: '#/definitions/ActionDiscountCollectionResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/action-discounts               controllers.ActionDiscounts.retrieveAll(`page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Retrieve all action discounts by product category
#  parameters:
#    - name: id
#      description: Identifier of product category.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: filter[date]
#      description: Date we want Action Discounts belongs to
#      in: query
#      type: string
#      default: ''
#      required: false
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Action Discounts
#    - Product Categories
#  responses:
#    200:
#      description: Action discounts successfully retrieved.
#      schema:
#        $ref: '#/definitions/ActionDiscountCollectionResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Product category doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/product-categories/:id/action-discounts                controllers.ActionDiscounts.retrieveAllByCategory(id: Long, `filter[date]`: String ?= "", `page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Retrieve all product categories by action discount
#  parameters:
#    - name: id
#      description: Identifier of action discount.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: page[offset]
#      description: Identifier of a position to start retrieving items from.
#      in: query
#      type: integer
#      default: 0
#      required: false
#    - name: page[limit]
#      description: Maximum number of items to retrieve.
#      in: query
#      type: integer
#      default: 10
#      required: false
#  tags:
#    - Action Discounts
#    - Product Categories
#  responses:
#    200:
#      description: Product categories successfully retrieved.
#      schema:
#        $ref: '#/definitions/ProductCategoryCollectionResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Action Discount doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
GET     /api/action-discounts/:id/product-categories                controllers.ProductCategories.retrieveAllByActionDiscount(id: Long, `page[offset]`: Int ?= 0, `page[limit]`: Int ?= 10)

###
#  summary: Add product category to action discount
#  parameters:
#    - name: id
#      description: Identifier of action discount.
#      in: path
#      type: integer
#      format: int64
#      required: true
#    - name: categoryId
#      description: Identifier of product category.
#      in: path
#      type: integer
#      format: int64
#      required: true
#  tags:
#    - Action Discounts
#    - Product Categories
#  responses:
#    200:
#      description: Product categories successfully added to action discount.
#      schema:
#        $ref: '#/definitions/ActionDiscountResponse'
#    400:
#      description: Malformed request specified.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Action Discount doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    404:
#      description: Product Category doesn't exist.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
#    500:
#      description: Internal server error occured.
#      schema:
#        $ref: '#/definitions/ErrorResponse'
###
POST    /api/action-discounts/:id/product-categories/:categoryId    controllers.ActionDiscounts.addProductCategory(id: Long, categoryId: Long)

### NoDocs ###
GET     /assets/*file       controllers.Assets.versioned(path = "/public", file: Asset)

### NoDocs ###
GET     /swagger/*file      controllers.Assets.at(path = "/public/lib/swagger-ui", file)