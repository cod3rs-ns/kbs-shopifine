import java.util.List
import com.dmarjanovic.drools.domain.*
import scala.collection.JavaConversions
import org.joda.time.DateTime
import scala.Option

// Basic Discounts
rule "Determine if Bill Item achieves Basic Discount based on Quantity and Consumer Goods category"
    salience -2
    agenda-group "bill-item-bonuses"
    when
        $item: BillItem(quantity > 20 && product.category.consumerGoods == false)
    then
        final BillItemDiscount discount = new BillItemDiscount("Based on quantity for non-consumer goods category.", 10, DiscountType.BASIC);
        $item.addDiscount(discount);
end

rule "Determine if Bill Item achieves Basic Discount based on item price and Consumer Goods category"
    salience -4
    agenda-group "bill-item-bonuses"
    when
        $item: BillItem(quantity * price > 5000 && product.category.consumerGoods == true)
    then
        final BillItemDiscount discount = new BillItemDiscount("Based on price for consumer goods category.", 7, DiscountType.BASIC);
        if (0 == $item.discounts().size()) {
            $item.addDiscount(discount);
        }
end

rule "Determine if Bill Item achieves Basic Discount based on Quantity and Category is 'TVs'"
    salience -8
    agenda-group "bill-item-bonuses"
    when
        $item: BillItem(quantity > 5 && "TVs".equalsIgnoreCase(product.category.name))
    then
        final BillItemDiscount discount = new BillItemDiscount("Discount for TVs.", 5, DiscountType.BASIC);
        if (0 == $item.discounts().size()) {
            $item.addDiscount(discount);
        }
end

rule "Determine if Bill Item achieves Basic Discount based on Quantity and Category is 'Computers'"
    salience -8
    agenda-group "bill-item-bonuses"
    when
        $item: BillItem(quantity > 5 && "Computers".equalsIgnoreCase(product.category.name))
    then
        final BillItemDiscount discount = new BillItemDiscount("Discount for computers.", 5, DiscountType.BASIC);
        if (0 == $item.discounts().size()) {
            $item.addDiscount(discount);
        }
end

rule "Determine if Bill Item achieves Basic Discount based on Quantity and Category is 'Laptops'"
    salience -8
    agenda-group "bill-item-bonuses"
    when
        $item: BillItem(quantity > 5 && "Monitors".equalsIgnoreCase(product.category.name))
    then
        final BillItemDiscount discount = new BillItemDiscount("Discount for monitors.", 5, DiscountType.BASIC);
        if (0 == $item.discounts().size()) {
            $item.addDiscount(discount);
        }
end

rule "Determine if Bill Item achieves Pro Discount based on Last Time Bought"
    salience -8
    agenda-group "bill-item-bonuses"
    when
        $item: BillItem(product.lastBoughtAt().isAfter(DateTime.now().minusDays(15)))
    then
        final BillItemDiscount discount = new BillItemDiscount("Based on product last time bought.", 2, DiscountType.PRO);
        $item.addDiscount(discount);
end

rule "Determine if Bill Item achieves Pro Discount based on Category Products Last Time Bought"
    salience -8
    agenda-group "bill-item-bonuses"
    when
        $item: BillItem($products: product.category.products)
    then
        final List<Product> products = JavaConversions.seqAsJavaList($products);
        for (final Product product: products) {
            if (product.lastBoughtAt().isAfter(DateTime.now().minusDays(30)) && product.id().get() != $item.getProduct().id().get()) {
                final BillItemDiscount discount = new BillItemDiscount("Based on product category last time bought.", 1, DiscountType.PRO);
                $item.addDiscount(discount);
                break;
            }
        }
end

rule "Determine Discounts based on Action Discounts"
    salience -8
    agenda-group "bill-item-bonuses"
    when
        $item: BillItem($discounts: product.category.actionDiscounts)
    then
        final List<ActionDiscount> discounts = JavaConversions.seqAsJavaList($discounts);
        for (final ActionDiscount d: discounts) {
            if ($item.billCreatedAt().isAfter(d.from()) && $item.billCreatedAt().isBefore(d.to())) {
                final BillItemDiscount discount = new BillItemDiscount("Based on " + d.name() + " action discount.", d.discount(), DiscountType.PRO);
                $item.addDiscount(discount);
            }
        }
end

rule "Determine Bill Item discount and price"
    salience -16
    agenda-group "bill-item-bonuses"
    when
        $item: BillItem()
        $total: Double() from accumulate(BillItemDiscount($discount: discount) from JavaConversions.seqAsJavaList($item.discounts), sum($discount))
    then
        final double maxDiscount = $item.getProduct().getCategory().maxDiscount();
        if ($total < maxDiscount) {
            final double itemDiscount = $total;
            $item.discount_$eq(itemDiscount);
        }
        else {
            $item.discount_$eq(maxDiscount);
        }

        $item.discountAmount_$eq($item.quantity() * $item.price() * $item.discount() / 100.0);
        $item.amount_$eq($item.quantity() * $item.price() * (100.0 - $item.discount()) / 100.0);
end
